# -*- coding:utf-8 -*-# soctt.bin created  2011.5.7 # sw2us.com @2011 #import sys,os,os.path,time,struct,traceback,threading,datetime,struct,array,sqlite3import  pickle,hashlib,base64from dbconn import *import uuidfrom PyQt4.QtCore import *from PyQt4.QtGui import *#from base import *import basesql_templ = '''BEGIN;CREATE TABLE "core_audiofile" (    "digest" varchar(80) NOT NULL,    "spxfile" varchar(30) NOT NULL,    "filetime" integer NOT NULL,    "duration" integer NOT NULL,    "status" integer NOT NULL,    "uptime" integer NOT NULL,    "serial" integer NOT NULL,    "attr" integer NOT NULL,    "phone" varchar(30) NOT NULL,    "client_sid" varchar(40),    "memo" text,    "memo_status" integer NOT NULL,    "type" integer NOT NULL,    "productid" varchar(40),    "operator" varchar(40));CREATE TABLE "core_client" (    "sid" varchar(40) NOT NULL,    "name" varchar(40) NOT NULL,    "sex" integer NOT NULL,    "corp" varchar(40),    "phone1" varchar(30),    "phone2" varchar(30),    "address" varchar(100),    "postcode" varchar(20),    "email" varchar(40),    "website" varchar(40),    "im" varchar(60),    "memo" text,    "personid" varchar(40),    "clientid" varchar(40),    "pinyin" varchar(40),    "status" integer NOT NULL,    "phone3" varchar(30),    "owner_org" varchar(60),    "type" integer NOT NULL,    "custom_tag" varchar(60));CREATE TABLE "core_syssettings" (    "key" varchar(80) NOT NULL,    "value" text,    "memo" text);CREATE TABLE "core_audiotemp" (    "serial" integer NOT NULL,    "client_sid" varchar(40),    "memo" text,    "type" varchar(30),    "productid" varchar(40),    "operator" varchar(40));CREATE TABLE "core_audiomapclient" (    "digest" varchar(40) NOT NULL,    "filetime" integer NOT NULL);CREATE INDEX "core_audiofile_5e45ffad" ON "core_audiofile" ("digest");CREATE INDEX "core_audiofile_236b7037" ON "core_audiofile" ("spxfile");CREATE INDEX "core_audiofile_46d7a866" ON "core_audiofile" ("filetime");CREATE INDEX "core_audiofile_714ba065" ON "core_audiofile" ("duration");CREATE INDEX "core_audiofile_36528e23" ON "core_audiofile" ("status");CREATE INDEX "core_audiofile_54f1ab09" ON "core_audiofile" ("uptime");CREATE INDEX "core_audiofile_12b6c921" ON "core_audiofile" ("serial");CREATE INDEX "core_audiofile_4a72d192" ON "core_audiofile" ("attr");CREATE INDEX "core_audiofile_1350014a" ON "core_audiofile" ("phone");CREATE INDEX "core_audiofile_595bcb8d" ON "core_audiofile" ("client_sid");CREATE INDEX "core_audiofile_6b3faef" ON "core_audiofile" ("memo");CREATE INDEX "core_audiofile_3f541145" ON "core_audiofile" ("memo_status");CREATE INDEX "core_audiofile_f429bc7" ON "core_audiofile" ("type");CREATE INDEX "core_audiofile_59e7c730" ON "core_audiofile" ("productid");CREATE INDEX "core_audiofile_2547811b" ON "core_audiofile" ("operator");CREATE INDEX "core_client_236a1d8" ON "core_client" ("sid");CREATE INDEX "core_client_52094d6e" ON "core_client" ("name");CREATE INDEX "core_client_447cc2c" ON "core_client" ("phone1");CREATE INDEX "core_client_47592f5" ON "core_client" ("phone2");CREATE INDEX "core_client_1d339d38" ON "core_client" ("address");CREATE INDEX "core_client_3904588a" ON "core_client" ("email");CREATE INDEX "core_client_2c71f4a3" ON "core_client" ("website");CREATE INDEX "core_client_49f4f441" ON "core_client" ("im");CREATE INDEX "core_client_6b3faef" ON "core_client" ("memo");CREATE INDEX "core_client_7f4affb5" ON "core_client" ("personid");CREATE INDEX "core_client_31bb25d" ON "core_client" ("clientid");CREATE INDEX "core_client_336a332" ON "core_client" ("pinyin");CREATE INDEX "core_client_36528e23" ON "core_client" ("status");CREATE INDEX "core_client_46650b2" ON "core_client" ("phone3");CREATE INDEX "core_client_543553f4" ON "core_client" ("owner_org");CREATE INDEX "core_client_f429bc7" ON "core_client" ("type");CREATE INDEX "core_client_45433545" ON "core_client" ("custom_tag");CREATE INDEX "core_syssettings_45544485" ON "core_syssettings" ("key");CREATE INDEX "core_audiotemp_12b6c921" ON "core_audiotemp" ("serial");CREATE INDEX "core_audiotemp_595bcb8d" ON "core_audiotemp" ("client_sid");CREATE INDEX "core_audiomapclient_5e45ffad" ON "core_audiomapclient" ("digest");CREATE INDEX "core_audiomapclient_46d7a866" ON "core_audiomapclient" ("filetime");COMMIT;'''class SqlPrepare:	def __init__(self,file='system.lib'):		#self.db = sqlite3.connect(':memory:')		from base import getApp		path = qApp.applicationDirPath().toUtf8().data().decode('utf-8')		if path.lower().find(u'python')==-1:			file = getApp().getBinPath()+'/'+file		sql = ''		if not os.path.exists(file):			sql = sql_templ		self.db = sqlite3.connect(file)		self.db.text_factory = str#		print file,self.db		if sql:			self.db.executescript(sql)			self.db.commit()		self.db_patch_addcolumn_operator()	def db_patch_addcolumn_operator(self):		sql = "select count(*) from sqlite_master where name='core_audiofile' and type='table' and sql like '%operator%'"		cr = self.db.cursor()		cr.execute(sql)		rst = cr.fetchone();		if rst[0] == 0:			sql='''\				BEGIN;				alter table core_audiofile add column operator char(40);				CREATE INDEX "core_audiofile_2547811b" ON "core_audiofile" ("operator");				COMMIT;			'''			self.db.executescript(sql)			self.db.commit()		sql = "select count(*) from sqlite_master where name='core_audiotemp' and type='table' and sql like '%operator%'"		cr = self.db.cursor()		cr.execute(sql)		rst = cr.fetchone();		if rst[0] == 0:			sql='''\				BEGIN;				alter table core_audiotemp add column operator char(40);				COMMIT;			'''			self.db.executescript(sql)			self.db.commit()		#客户表增加  custom_tag 字段  2013.11.8		sql = "select count(*) from sqlite_master where name='core_client' and type='table' and sql like '%custom_tag%'"		cr = self.db.cursor()		cr.execute(sql)		rst = cr.fetchone();		if rst[0] == 0:			sql='''\				BEGIN;				alter table core_client add column custom_tag char(60);				COMMIT;			'''			self.db.executescript(sql)			self.db.commit()	def handle(self):		return self.db	def getRecCountBySpxFile(self,spxfile):		try:			spxfile = os.path.normcase(spxfile)			sql = 'select count(*) as cnt from core_audiofile where spxfile=?'			cr = self.db.cursor()			cr.execute(sql,(spxfile,))			r = fetchoneDict(cr)			return r['cnt']		except:			traceback.print_exc()			return 0	def getRecCountByDigest(self,digest):		try:			sql = 'select count(*) as cnt from core_audiofile where digest=?'			cr = self.db.cursor()			cr.execute(sql,(digest,))			r = fetchoneDict(cr)			return r['cnt']		except:			traceback.print_exc()			return 0	def appendSpxFile(self,spxfile,digest,status=0):		import utils,format,time		try:			spxfile = os.path.normcase(spxfile)			if not digest:				digest = utils.getfiledigest(spxfile)			info = format.parseSpxFileInfo(spxfile)			if not info:				return False			duration = info.duration			filetime = time.mktime((info.year,info.month,							info.day,info.hour,info.minute,info.second,							0,0,0))			uptime = 0			clientsid =''			#匹配客户记录			phone = info.phone			if not phone:				phone = 'z-'*10			sql = "select * from core_client where (phone1=? or phone2=? or phone3=?) and memo!='%s'"%base.AppConst.CLIENT_DELETED_MARKER			cr = self.db.cursor()			multiclients = False			if info.phone:				cr.execute(sql,(phone,phone,phone))				rs = fetchallDict(cr)				# print repr(rs)				if rs: #存在电话一对多客户的情况，clientsid保持为'',					if len(rs) == 1:						r = rs[0]						clientsid = r['sid']					else:						multiclients = True  #匹配到多关联客户			# print 'client_sid:%s'%clientsid			#从audiotemp中根据serial获取memo信息和client_sid			sql = 'select * from core_audiotemp where serial=?'			cr.execute(sql,(info.serial,))			rs = fetchallDict(cr)			memo = ''			type = base.AppConst.ARCHIVE_NOTE_TYPE_NORMAL			productid=''			operator='' # 2013.10.8			#从缓冲表中取出备注等信息，写入录音文件表			if rs: #pickup memo and client_sid from audiotemp, remove that record!				r = rs[0]				memo = r['memo']				clientsid = r['client_sid']				type = r['type']				productid = r['productid']				operator = r['operator']				sql='delete from core_audiotemp where serial=?'				cr.execute(sql,(info.serial,))				if clientsid:					multiclients = False    #临时表已经记录对应客户			print 'client_sid',clientsid			sql = 'insert into core_audiofile values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)'			cr = self.db.cursor()			cr.execute(sql,(digest,							spxfile,							filetime,							duration,							status,							uptime,							info.serial,							info.attr,							info.phone,							clientsid,							memo,							0,							type, #type							productid,  #productid			                operator    # 操作经理 2013.10.8							))			#电话匹配上多个客户，需要提示用户选择			if multiclients: #写入临时未配对上客户表				cr = self.db.cursor()				sql = 'select count(*) as cnt from core_audiomapclient where digest=?'				cr.execute(sql,(digest,))				r = fetchoneDict(cr)				if not r or r['cnt'] == 0:					sql = "insert into core_audiomapclient values(?,?)"					cr.execute(sql,(digest,filetime))			self.db.commit()			# 匹配客户信息，关联			# if info.phone:			# 	sql= 'select * from core_client where phone1=? or phone2=? or phone3=?'			# 	cr = self.db.cursor()			# 	cr.execute(sql,(info.phone,info.phone,info.phone))			# 	rs = fetchallDict(cr)			# 	sid =''			# 	if rs:			# 		sid = rs[0]['sid']			# 	if sid:			# 		sql = 'update core_audiofile set client_sid=?,memo_status=0 where digest=?'			# 		cr.execute(sql,(sid,digest))			# 		self.db.commit()			return True		except:			traceback.print_exc()			return Falsedef gen_sid():	return uuid.uuid1().hexdef test():	pass	if __name__=='__main__':	test()	