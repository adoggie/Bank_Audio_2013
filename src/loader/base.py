# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,datetimeimport stringimport utilsimport json,picklefrom dbconn import *import dbsqlENCRYPT_PUBKEY='''-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQAB-----END PUBLIC KEY-----'''ENCRYPT_PRIVKEY='''-----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQABAoGBAIMYOyJmR9Tgc+89ZJaPlLVifwWgBvHld1i2uKWAOl+xKM7s/LBnEmXjYGAun8kCwuSn3tug6R8eQ8wgn/Kfq61/sEfTl7G07P/toUTR41hnmkESLsCj/DW+B45EqhJlVU5BInfhTKHo/GJHSJJM4qzGnFpvzboRcxJ+OWjkUoahAkEAuc2xgH4SZzkH3xp2v45xVKpJ+OXuGZdlctLy1+hKN1RtFoXrD8P8sDBNfFjJ0g9+3qIU31HcuvXnKk25MCJVBQJBAM7CnUeSXQ68MYhB9Ze2SShwWLSusgdPB1BOhWrWVguLblX8vibngFJDH4HsmZH+1qGQ2IoVrvIvnw22NhMTxFsCQAJYOSQw8xSAYLwM/nCeYIm7+GD+rcl+4pXXWZ8l3EHke9fr6rJxO7ARe/jUuf8/mM9AZlkHFGz7i2Y6Qtr7o+0CQDnI0kQKd8+CcSVvqb+4xkFzBJeaq063m4eqKkdtl6aqVS/a7xnYYVicQdYB1fmji0CkRqBw5u/wtzcR0ZMLVzkCQDYl+2GunTk3G+SeWxQdQKjggPmyHwiX9UYAOdJs5/vLvjARuaAJ87jZjS0jB48WPnRNITjbCn9MBncEB7asch4=-----END RSA PRIVATE KEY-----'''class CallReturn:	def __init__(self,succ =True,msg='',result=None,code=0):		self.succ = succ		self.errcode = code  #没错误 		self.msg = msg		self.result = result  #携带任何数据返回s	#def __str__(self):	#	return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)	def __unicode__(self):		return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)class Session:	def __init__(self):		self.token = ''class TermApp:	def __init__(self):		self.token = ''		self.settings={}		self.app_path = 'c:/leadtel'		self.db = None	def init(self):		try:#			self.db = dbsql.SqlPrepare('system.db').handle()			f = open(self.getBinPath()+'/local.profile')			s = f.read()			f.close()			self.settings = pickle.loads(s)		except:			traceback.print_exc()	def getBinPath(self):		return self.app_path+'/bin'	def getPath(self):		return self.app_path	def getDB(self):		return self.db	def getTempPath(self):		return self.app_path+'/temp'	def getAudioUploadPath(self):		return self.app_path+'/upload'	def getAudioStorePath(self):		return self.app_path+'/media'	def getSettings(self):		return self.settings	def saveSettings(self):		try:			f = open('local.profile','w')			d = pickle.dumps(self.settings)			f.write(d)			f.close()		except:			traceback.print_exc()	handle = None	@staticmethod	def instance():		if not TermApp.handle:			TermApp.handle = TermApp()		return TermApp.handle	def getToken(self):		return self.token	def getFileServerAddress(self):		return self.settings.get('file_server_address')	def getCommServerAddress(self):		return self.settings.get('comm_server_address')def getApp():	return TermApp.instance()if __name__=='__main__':	pass